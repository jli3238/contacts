{"version":3,"sources":["redux/reducers/index.ts","App.tsx","sagas/index.ts","serviceWorker.ts","index.tsx"],"names":["initialState","reducer","state","action","type","loading","contacts","json","ContactsContainer","React","lazy","App","fetchContacts","actionWatcher","rootSaga","fetch","method","headers","then","response","put","error","message","takeLatest","all","Boolean","window","location","hostname","match","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","logger","run","render","fallback","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"oPAGMA,EAA0B,GAajBC,EAXC,WAAwC,IAAvCC,EAAsC,uDAA9BF,EAAcG,EAAgB,uCACrD,OAAQA,EAAOC,MACb,IAAK,eACH,OAAO,2BAAKF,GAAZ,IAAmBG,SAAS,IAC9B,IAAK,oBACH,OAAO,2BAAKH,GAAZ,IAAmBI,SAAUH,EAAOI,KAAK,GAAIF,SAAS,IACxD,QACE,OAAOH,ICRPM,G,MAAoBC,IAAMC,MAAK,kBAAM,yDAE5B,SAASC,IACtB,OAAO,kBAACH,EAAD,M,uCCLCI,G,WAcAC,G,WAIeC,GAlBzB,SAAUF,IAAV,uEAEe,OAFf,SAEqBG,MAAM,iDAAkD,CACzEC,OAAQ,MACRC,QAAS,CACP,eAAgB,mBAChB,YAAa,8EAGdC,MAAK,SAAAC,GAAQ,OAAIA,EAASZ,UAT/B,OAWE,OATMA,EAFR,gBAWQa,YAAI,CAAEhB,KAAM,oBAAqBG,KAAMA,EAAKD,UAAY,CAAC,CAAEe,MAAOd,EAAKe,YAX/E,uCAcA,SAAUT,IAAV,iEACE,OADF,SACQU,YAAW,eAAgBX,GADnC,uCAIe,SAAUE,IAAV,iEACb,OADa,SACPU,YAAI,CACRX,MAFW,uCCRKY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNN,IAAMC,EAAiBC,cAEjBC,EAAQC,YACZhC,EACAiC,YAAgBJ,EAAgBK,WAGlCL,EAAeM,IAAItB,GAEnBuB,iBACE,kBAAC,WAAD,CAAUC,SAAU,0CAClB,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAACrB,EAAD,SAIN6B,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAA1B,GACL2B,QAAQ3B,MAAMA,EAAMC,c","file":"static/js/main.c43c976e.chunk.js","sourcesContent":["// import { Action } from 'redux';\r\nimport { Contact } from '../types/Contact';\r\n\r\nconst initialState: Contact[] = [];\r\n\r\nconst reducer = (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case 'GET_CONTACTS':\r\n      return { ...state, loading: true };\r\n    case 'CONTACTS_RECEIVED':\r\n      return { ...state, contacts: action.json[0], loading: false }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\n// import { useSelector } from 'react-redux';\n// import { createSelector } from 'reselect';\n\nconst ContactsContainer = React.lazy(() => import('./containers/ContactsContainer'));\n\nexport default function App() {\n  return <ContactsContainer />;\n}\n","import { put, takeLatest, all } from 'redux-saga/effects';\r\n\r\nfunction* fetchContacts() {\r\n\r\n  const json = yield fetch('https://sahmed93846.api-us1.com/api/3/contacts', {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Api-Token': 'bcd062dedabcd0f1ac8a568cdcf58660c44d7e79b91763cc1a5d0c03d52c522d851fceb0'\r\n    }\r\n  })\r\n    .then(response => response.json());\r\n\r\n  yield put({ type: \"CONTACTS_RECEIVED\", json: json.contacts || [{ error: json.message }] });\r\n}\r\n\r\nfunction* actionWatcher() {\r\n  yield takeLatest('GET_CONTACTS', fetchContacts)\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    actionWatcher(),\r\n  ]);\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Suspense } from 'react';\nimport { render } from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { logger } from 'redux-logger';\nimport reducer from './redux/reducers';\nimport './style/index.css';\nimport App from './App';\nimport rootSaga from './sagas';\nimport * as serviceWorker from './serviceWorker';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(sagaMiddleware, logger)\n)\n\nsagaMiddleware.run(rootSaga);\n\nrender(\n  <Suspense fallback={<p>loading...</p>}>\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>\n  </Suspense>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}